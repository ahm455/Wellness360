from flask import Flask, render_template, request, redirect, url_for, flash, session, Response
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from functools import wraps  # <-- THIS IS THE IMPORT YOU NEED TO ADD
import pyodbc
import logging
import os
from datetime import datetime
from contextlib import contextmanager
from flask_mail import Mail, Message
import csv
from io import StringIO

# Logging configuration
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Flask app setup
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-secret-key-here')
app.config['PROPAGATE_EXCEPTIONS'] = True
app.debug = True

# File upload configuration
UPLOAD_FOLDER = os.path.join('static', 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Database connection function
def get_db_connection():
    try:
        conn = pyodbc.connect(
            r'DRIVER={ODBC Driver 17 for SQL Server};'
            r'SERVER=.\SQLEXPRESS;'
            r'DATABASE=wellness360;'
            r'Trusted_Connection=yes;'
        )
        logger.debug("Database connection successful")
        return conn
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        raise

@contextmanager
def db_cursor():
    conn = get_db_connection()
    if not conn:
        raise ConnectionError("Failed to connect to the database.")
    cursor = conn.cursor()
    try:
        yield cursor
        conn.commit()
    except Exception as e:
        conn.rollback()
        logger.exception("Database operation failed")
        raise
    finally:
        cursor.close()
        conn.close()
        
# Helper functions
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Please log in to access this page.', 'warning')
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session or session.get('role') != 'admin':
            flash('Admin access required', 'danger')
            return redirect(url_for('dashboard'))
        return f(*args, **kwargs)
    return decorated_function

def get_user_by_id(user_id):
    with db_cursor() as cursor:
        cursor.execute('SELECT * FROM Users WHERE UserID = ?', (user_id,))
        columns = [column[0] for column in cursor.description]
        user = cursor.fetchone()
        if user:
            return dict(zip(columns, user))
        return None

def update_user_password(user_id, new_password):
    hashed_password = generate_password_hash(new_password)
    with db_cursor() as cursor:
        cursor.execute('UPDATE Users SET Password = ? WHERE UserID = ?', (hashed_password, user_id))

def validate_password(password):
    if len(password) < 8:
        return False
    if not re.search("[a-z]", password):
        return False
    if not re.search("[A-Z]", password):
        return False
    if not re.search("[0-9]", password):
        return False
    if not re.search("[!@#$%^&*()]", password):
        return False
    return True

# Routes
@app.route('/')
def index():
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form.get('name')
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')

        if not all([name, email, password, confirm_password]):
            flash('All fields are required', 'danger')
            return redirect(url_for('register'))

        if password != confirm_password:
            flash('Passwords do not match', 'danger')
            return redirect(url_for('register'))

        if not validate_password(password):
            flash('Password must be at least 8 characters with uppercase, lowercase, number and special character', 'danger')
            return redirect(url_for('register'))

        hashed_password = generate_password_hash(password)

        try:
            with db_cursor() as cursor:
                cursor.execute('''
                    INSERT INTO Users (Name, Email, Password, Role, CreatedAt) 
                    VALUES (?, ?, ?, ?, ?)
                ''', (name, email, hashed_password, 'user', datetime.now()))
                
                # Send verification email
                send_verification_email(email, name)
                
                flash('Registration successful! Please check your email to verify your account.', 'success')
                return redirect(url_for('login'))
        except Exception as e:
            logger.exception("Registration failed")
            flash('Registration failed. Email may already be in use.', 'danger')
            return redirect(url_for('register'))

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        try:
            with db_cursor() as cursor:
                cursor.execute('''SELECT UserID, Name, Email, Password 
                                FROM Users 
                                WHERE Email = ?''', (email,))
                user = cursor.fetchone()

                if user and check_password_hash(user.Password, password):
                    session['user_id'] = user.UserID
                    session['name'] = user.Name
                    session['email'] = user.Email
                    flash('Login successful!', 'success')
                    return redirect(url_for('dashboard'))
                else:
                    flash('Invalid email or password', 'error')
        except Exception as e:
            logging.error(f"Database error during login: {e}")
            flash('Database error occurred', 'error')
    
    return render_template('login.html')
@app.route('/search')
def search():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    query = request.args.get('q', '').strip()
    if not query:
        return redirect(url_for('dashboard'))
    
    try:
        with db_cursor() as cursor:
            # Search health data
            cursor.execute('''
                SELECT * FROM HealthData
                WHERE UserID = ? AND 
                (Description LIKE ? OR Category LIKE ?)
                ORDER BY EntryDate DESC
            ''', (session['user_id'], f'%{query}%', f'%{query}%'))
            
            health_data = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                health_data.append(dict(zip(columns, row)))

            return render_template('dashboard.html',
                                health_data=health_data,
                                current_date=datetime.now().strftime('%B %d, %Y'),
                                query=query)
    except Exception as e:
        logger.error(f"Search failed: {e}")
        flash('Search failed. Please try again.', 'danger')
        return redirect(url_for('dashboard'))

@app.route('/logout')
@login_required
def logout():
    session.clear()
    flash('Logged out successfully.', 'success')
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    try:
        with db_cursor() as cursor:
            # Fetch health data
            cursor.execute("SELECT * FROM HealthData WHERE UserID = ? ORDER BY EntryDate DESC", (session['user_id'],))
            health_data = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                health_data.append(dict(zip(columns, row)))

            # Fetch medical records
            cursor.execute("SELECT * FROM MedicalRecords WHERE UserID = ? ORDER BY RecordDate DESC", (session['user_id'],))
            medical_records = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                medical_records.append(dict(zip(columns, row)))

            # Fetch chart data
            cursor.execute("""
                SELECT TOP 30 EntryDate, Calories, DurationMinutes
                FROM HealthData
                WHERE UserID = ?
                ORDER BY EntryDate
            """, (session['user_id'],))
            trends = cursor.fetchall()
            
            labels = []
            calories_data = []
            duration_data = []
            if trends:
                columns = [column[0] for column in cursor.description]
                trends = [dict(zip(columns, row)) for row in trends]
                labels = [row['EntryDate'].strftime('%Y-%m-%d') for row in trends]
                calories_data = [row['Calories'] for row in trends]
                duration_data = [row['DurationMinutes'] for row in trends]

            # Fetch reminders
            cursor.execute("""
                SELECT * FROM Reminders
                WHERE UserID = ? AND Status = 'Pending'
                ORDER BY ReminderDate, ReminderTime
            """, (session['user_id'],))
            reminders = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                reminders.append(dict(zip(columns, row)))

            # Fetch goals
            cursor.execute("SELECT * FROM Goals WHERE UserID = ?", (session['user_id'],))
            goals = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                goals.append(dict(zip(columns, row)))

            # Fetch activity logs
            cursor.execute("SELECT * FROM ActivityLogs WHERE UserID = ? ORDER BY ActivityDate DESC", (session['user_id'],))
            activity_logs = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                activity_logs.append(dict(zip(columns, row)))

    except Exception as e:
        logger.error(f"Error fetching data for dashboard: {e}")
        flash('Error loading dashboard data', 'error')
        health_data = []
        medical_records = []
        labels = []
        calories_data = []
        duration_data = []
        reminders = []
        goals = []
        activity_logs = []

    current_date = datetime.now().strftime('%B %d, %Y')
    return render_template('dashboard.html',
                         health_data=health_data,
                         medical_records=medical_records,
                         labels=labels,
                         calories_data=calories_data,
                         duration_data=duration_data,
                         reminders=reminders,
                         goals=goals,
                         activity_logs=activity_logs,
                         current_date=current_date)

@app.route('/profile')
@login_required
def profile():
    try:
        with db_cursor() as cursor:
            cursor.execute('SELECT * FROM Users WHERE UserID = ?', (session['user_id'],))
            columns = [column[0] for column in cursor.description]
            user = cursor.fetchone()
            if user:
                user_dict = dict(zip(columns, user))
                return render_template('profile.html', user=user_dict)
            else:
                flash('User not found', 'danger')
                return redirect(url_for('dashboard'))
    except Exception as e:
        logger.error(f"Error fetching profile: {e}")
        flash('Error loading profile', 'danger')
        return redirect(url_for('dashboard'))

@app.route('/update_profile', methods=['POST'])
@login_required
def update_profile():
    try:
        name = request.form.get('name')
        email = request.form.get('email')
        
        with db_cursor() as cursor:
            cursor.execute('''
                UPDATE Users 
                SET Name = ?, Email = ?
                WHERE UserID = ?
            ''', (name, email, session['user_id']))
            
            session['name'] = name
            session['email'] = email
            
            flash('Profile updated successfully!', 'success')
    except Exception as e:
        logger.error(f"Error updating profile: {e}")
        flash('Error updating profile', 'danger')
    
    return redirect(url_for('profile'))

@app.route('/change_password', methods=['GET', 'POST'])
@login_required
def change_password():
    if request.method == 'POST':
        current_password = request.form.get('current_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')
        
        if new_password != confirm_password:
            flash('New passwords do not match', 'danger')
            return redirect(url_for('change_password'))
        
        if not validate_password(new_password):
            flash('Password must be at least 8 characters with uppercase, lowercase, number and special character', 'danger')
            return redirect(url_for('change_password'))
        
        try:
            with db_cursor() as cursor:
                cursor.execute('SELECT Password FROM Users WHERE UserID = ?', (session['user_id'],))
                user = cursor.fetchone()
                
                if user and check_password_hash(user.Password, current_password):
                    hashed_password = generate_password_hash(new_password)
                    cursor.execute('UPDATE Users SET Password = ? WHERE UserID = ?', 
                                 (hashed_password, session['user_id']))
                    flash('Password changed successfully!', 'success')
                    return redirect(url_for('profile'))
                else:
                    flash('Current password is incorrect', 'danger')
        except Exception as e:
            logger.error(f"Error changing password: {e}")
            flash('Error changing password', 'danger')
    
    return render_template('change_password.html')

@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        
        try:
            with db_cursor() as cursor:
                cursor.execute('SELECT UserID, Name FROM Users WHERE Email = ?', (email,))
                user = cursor.fetchone()
                
                if user:
                    token = generate_password_hash(f"{user.UserID}{datetime.now()}")
                    cursor.execute('''
                        INSERT INTO PasswordResetTokens (UserID, Token, ExpiresAt)
                        VALUES (?, ?, ?)
                    ''', (user.UserID, token, datetime.now() + timedelta(hours=1)))
                    
                    send_password_reset_email(email, user.Name, token)
                    flash('Password reset link sent to your email', 'success')
                    return redirect(url_for('login'))
                else:
                    flash('Email not found', 'danger')
        except Exception as e:
            logger.error(f"Error processing forgot password: {e}")
            flash('Error processing request', 'danger')
    
    return render_template('forgot_password.html')

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT UserID FROM PasswordResetTokens 
                WHERE Token = ? AND ExpiresAt > ?
            ''', (token, datetime.now()))
            token_record = cursor.fetchone()
            
            if not token_record:
                flash('Invalid or expired token', 'danger')
                return redirect(url_for('login'))
            
            user_id = token_record[0]
            
            if request.method == 'POST':
                new_password = request.form.get('new_password')
                confirm_password = request.form.get('confirm_password')
                
                if new_password != confirm_password:
                    flash('Passwords do not match', 'danger')
                    return render_template('reset_password.html', token=token)
                
                if not validate_password(new_password):
                    flash('Password must be at least 8 characters with uppercase, lowercase, number and special character', 'danger')
                    return render_template('reset_password.html', token=token)
                
                hashed_password = generate_password_hash(new_password)
                cursor.execute('UPDATE Users SET Password = ? WHERE UserID = ?', 
                             (hashed_password, user_id))
                cursor.execute('DELETE FROM PasswordResetTokens WHERE Token = ?', (token,))
                
                flash('Password reset successfully! Please log in.', 'success')
                return redirect(url_for('login'))
            
            return render_template('reset_password.html', token=token)
    except Exception as e:
        logger.error(f"Error resetting password: {e}")
        flash('Error resetting password', 'danger')
        return redirect(url_for('login'))

@app.route('/verify_email/<token>')
def verify_email(token):
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT UserID FROM EmailVerificationTokens 
                WHERE Token = ? AND ExpiresAt > ?
            ''', (token, datetime.now()))
            token_record = cursor.fetchone()
            
            if token_record:
                user_id = token_record[0]
                cursor.execute('UPDATE Users SET Verified = 1 WHERE UserID = ?', (user_id,))
                cursor.execute('DELETE FROM EmailVerificationTokens WHERE Token = ?', (token,))
                flash('Email verified successfully! Please log in.', 'success')
            else:
                flash('Invalid or expired verification link', 'danger')
    except Exception as e:
        logger.error(f"Error verifying email: {e}")
        flash('Error verifying email', 'danger')
    
    return redirect(url_for('login'))

@app.route('/log_health', methods=['GET', 'POST'])
@login_required
def log_health():
    if request.method == 'POST':
        try:
            entry_date = datetime.strptime(request.form.get('date', ''), '%Y-%m-%d') if request.form.get('date') else datetime.now()
            calories = int(request.form.get('calories', 0))
            duration = int(request.form.get('duration', 0))

            entry_type = request.form.get('type', '').strip()
            category = request.form.get('category', '').strip()
            schedule = request.form.get('schedule', '').strip()
            description = request.form.get('description', '').strip()

            if not entry_type or not category or not description:
                flash('Type, category, and description are required.', 'danger')
                return redirect(url_for('log_health'))

            with db_cursor() as cursor:
                # Insert into HealthData
                cursor.execute('''
                    INSERT INTO HealthData 
                    (UserID, EntryDate, EntryType, Category, Schedule, Description, Calories, DurationMinutes)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    entry_date,
                    entry_type,
                    category,
                    schedule,
                    description,
                    calories,
                    duration
                ))

                # Log activity
                cursor.execute('''
                    INSERT INTO ActivityLogs 
                    (UserID, ActivityType, ActivityDate, Description)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    'Health Entry',
                    datetime.now(),
                    f"Logged health data: {entry_type} - {description}"
                ))

                flash('Health entry added successfully!', 'success')
                return redirect(url_for('dashboard'))

        except ValueError as ve:
            logging.exception("Invalid input format")
            flash('Invalid input format. Please check your entries.', 'danger')
        except Exception as e:
            logging.exception("Database error while logging health")
            flash('Failed to log health data. Please try again.', 'danger')

    return render_template('log_health.html')


@app.route('/add_reminder', methods=['GET', 'POST'])
def add_reminder():
    if 'user_id' not in session:
        flash('Please login first', 'warning')
        return redirect(url_for('login'))

    if request.method == 'POST':
        try:
            # Debug: Print form data
            print("Form data received:", request.form)
            
            reminder_type = request.form.get('type')
            reminder_date_str = request.form.get('date')
            reminder_time_str = request.form.get('time')

            # Validate required fields
            if not all([reminder_type, reminder_date_str, reminder_time_str]):
                flash('All fields are required', 'danger')
                return redirect(url_for('add_reminder'))

            # Convert to proper types
            reminder_date = datetime.strptime(reminder_date_str, '%Y-%m-%d').date()
            reminder_time = datetime.strptime(reminder_time_str, '%H:%M').time()

            # Debug: Print parsed values
            print(f"Parsed date: {reminder_date}, time: {reminder_time}")

            with db_cursor() as cursor:
                # Debug SQL
                sql = '''
                INSERT INTO Reminders 
                (UserID, ReminderType, ReminderDate, ReminderTime, Status)
                VALUES (?, ?, ?, ?, ?)
                '''
                params = (
                    session['user_id'],
                    reminder_type,
                    reminder_date,
                    reminder_time,
                    'Pending'
                )
                print("Executing SQL:", sql)
                print("With params:", params)
                
                cursor.execute(sql, params)
                
                # Verify insertion
                cursor.execute("SELECT @@IDENTITY AS ID")
                new_id = cursor.fetchone().ID
                print(f"Successfully inserted reminder with ID: {new_id}")
                
                flash('Reminder added successfully!', 'success')
                return redirect(url_for('dashboard'))

        except ValueError as ve:
            logger.error(f"Date/time format error: {str(ve)}")
            flash(f'Invalid date/time format: {str(ve)}', 'error')
        except pyodbc.Error as db_err:
            logger.error(f"Database error: {str(db_err)}")
            flash('Database error occurred. Please check logs.', 'danger')
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}", exc_info=True)
            flash('Failed to add reminder. Please try again.', 'danger')

    return render_template('add_reminder.html')

@app.route('/complete_reminder/<int:reminder_id>')
@login_required
def complete_reminder(reminder_id):
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                UPDATE Reminders 
                SET Status = 'Completed' 
                WHERE ReminderID = ? AND UserID = ?
            ''', (reminder_id, session['user_id']))
            
            cursor.execute('''
                INSERT INTO ActivityLogs 
                (UserID, ActivityType, ActivityDate, Description)
                VALUES (?, ?, ?, ?)
            ''', (
                session['user_id'],
                'Reminder Completed',
                datetime.now(),
                f"Completed reminder ID: {reminder_id}"
            ))
            
            flash('Reminder marked as completed.', 'success')
    except Exception as e:
        logger.error(f"Failed to mark reminder complete: {e}")
        flash('Failed to complete reminder.', 'danger')

    return redirect(url_for('dashboard'))

@app.route('/set_goal', methods=['GET', 'POST'])
@login_required
def set_goal():
    if request.method == 'POST':
        try:
            target_date = datetime.strptime(request.form['target_date'], '%Y-%m-%d').date()
            
            with db_cursor() as cursor:
                cursor.execute('''
                    INSERT INTO Goals 
                    (UserID, GoalType, TargetValue, CurrentValue, TargetDate, Description)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    request.form['goal_type'],
                    float(request.form['target_value']),
                    float(request.form['current_value']),
                    target_date,
                    request.form['description']
                ))
                
                cursor.execute('''
                    INSERT INTO ActivityLogs 
                    (UserID, ActivityType, ActivityDate, Description)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    'Goal Set',
                    datetime.now(),
                    f"Set new goal: {request.form['goal_type']} - Target: {request.form['target_value']}"
                ))
                
                flash('Goal set successfully!', 'success')
                return redirect(url_for('dashboard'))
        except ValueError as ve:
            logger.error(f"Invalid input format: {ve}")
            flash('Invalid input format. Please check your entries.', 'error')
        except Exception as e:
            logger.error(f"Failed to set goal: {e}")
            flash('Failed to set goal. Please try again.', 'danger')

    return render_template('set_goal.html')

@app.route('/update_goal/<int:goal_id>', methods=['GET', 'POST'])
@login_required
def update_goal(goal_id):
    try:
        with db_cursor() as cursor:
            cursor.execute('SELECT * FROM Goals WHERE GoalID = ? AND UserID = ?', (goal_id, session['user_id']))
            goal = cursor.fetchone()

            if not goal:
                flash('Goal not found.', 'danger')
                return redirect(url_for('dashboard'))

            if request.method == 'POST':
                target_date = datetime.strptime(request.form['target_date'], '%Y-%m-%d').date()
                
                cursor.execute('''
                    UPDATE Goals 
                    SET GoalType = ?, TargetValue = ?, CurrentValue = ?, TargetDate = ?, Description = ?
                    WHERE GoalID = ? AND UserID = ?
                ''', (
                    request.form['goal_type'],
                    float(request.form['target_value']),
                    float(request.form['current_value']),
                    target_date,
                    request.form['description'],
                    goal_id,
                    session['user_id']
                ))
                
                cursor.execute('''
                    INSERT INTO ActivityLogs 
                    (UserID, ActivityType, ActivityDate, Description)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    'Goal Updated',
                    datetime.now(),
                    f"Updated goal: {request.form['goal_type']}"
                ))
                
                flash('Goal updated successfully!', 'success')
                return redirect(url_for('dashboard'))

            columns = [column[0] for column in cursor.description]
            goal_dict = dict(zip(columns, goal))
            return render_template('update_goal.html', goal=goal_dict)
    except Exception as e:
        logger.error(f"Error updating goal: {e}")
        flash('Error updating goal.', 'danger')
        return redirect(url_for('dashboard'))

@app.route('/upload_record', methods=['GET', 'POST'])
@login_required
def upload_record():
    if request.method == 'POST' and 'file' in request.files:
        file = request.files['file']
        if file.filename == '':
            flash('No file selected', 'danger')
            return redirect(request.url)

        if not allowed_file(file.filename):
            flash('File type not allowed', 'danger')
            return redirect(request.url)

        try:
            filename = secure_filename(file.filename)
            save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(save_path)

            record_date = datetime.strptime(request.form['record_date'], '%Y-%m-%d').date()
            
            with db_cursor() as cursor:
                cursor.execute("""
                    INSERT INTO MedicalRecords 
                    (UserID, Title, Description, RecordDate, FilePath)
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    session['user_id'],
                    request.form['title'],
                    request.form['description'],
                    record_date,
                    save_path
                ))
                
                cursor.execute('''
                    INSERT INTO Uploads 
                    (UserID, FileName, FilePath, UploadedAt)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    filename,
                    save_path,
                    datetime.now()
                ))
                
                cursor.execute('''
                    INSERT INTO ActivityLogs 
                    (UserID, ActivityType, ActivityDate, Description)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    'Record Uploaded',
                    datetime.now(),
                    f"Uploaded medical record: {request.form['title']}"
                ))
                
                flash('Medical record uploaded successfully.', 'success')
                return redirect(url_for('view_records'))
        except ValueError as ve:
            logger.error(f"Invalid date format: {ve}")
            flash('Invalid date format. Please use YYYY-MM-DD.', 'error')
        except Exception as e:
            logger.error(f"Failed to upload record: {e}")
            if os.path.exists(save_path):
                os.remove(save_path)
            flash('Failed to upload medical record.', 'danger')

    return render_template('upload_record.html')

@app.route('/view_records')
@login_required
def view_records():
    try:
        with db_cursor() as cursor:
            cursor.execute("""
                SELECT RecordID, Title, Description, RecordDate, FilePath 
                FROM MedicalRecords 
                WHERE UserID = ?
                ORDER BY RecordDate DESC
            """, (session['user_id'],))
            columns = [column[0] for column in cursor.description]
            records = [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Failed to fetch records: {e}")
        records = []
        flash('Failed to load medical records.', 'danger')

    return render_template('view_records.html', records=records)

@app.route('/download_record/<int:record_id>')
@login_required
def download_record(record_id):
    try:
        with db_cursor() as cursor:
            cursor.execute("""
                SELECT FilePath FROM MedicalRecords 
                WHERE RecordID = ? AND UserID = ?
            """, (record_id, session['user_id']))
            record = cursor.fetchone()
            
            if record:
                file_path = record[0]
                directory = os.path.dirname(file_path)
                filename = os.path.basename(file_path)
                return send_from_directory(directory, filename, as_attachment=True)
            else:
                flash('Record not found', 'danger')
    except Exception as e:
        logger.error(f"Failed to download record: {e}")
        flash('Failed to download record', 'danger')
    
    return redirect(url_for('view_records'))

@app.route('/delete_record/<int:record_id>', methods=['POST'])
@login_required
def delete_record(record_id):
    try:
        with db_cursor() as cursor:
            cursor.execute("SELECT FilePath FROM MedicalRecords WHERE RecordID = ? AND UserID = ?", 
                         (record_id, session['user_id']))
            record = cursor.fetchone()
            
            if record:
                file_path = record[0]
                cursor.execute("DELETE FROM MedicalRecords WHERE RecordID = ? AND UserID = ?", 
                             (record_id, session['user_id']))
                
                cursor.execute("DELETE FROM Uploads WHERE FilePath = ? AND UserID = ?", 
                             (file_path, session['user_id']))
                
                cursor.execute('''
                    INSERT INTO ActivityLogs 
                    (UserID, ActivityType, ActivityDate, Description)
                    VALUES (?, ?, ?, ?)
                ''', (
                    session['user_id'],
                    'Record Deleted',
                    datetime.now(),
                    f"Deleted medical record ID: {record_id}"
                ))
                
                if os.path.exists(file_path):
                    os.remove(file_path)
                
                flash('Record deleted successfully.', 'success')
            else:
                flash('Record not found.', 'danger')
    except Exception as e:
        logger.error(f"Failed to delete record: {e}")
        flash('Failed to delete record.', 'danger')

    return redirect(url_for('view_records'))

@app.route('/view_uploads')
@login_required
def view_uploads():
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT UploadID, FileName, FilePath, UploadedAt
                FROM Uploads
                WHERE UserID = ?
                ORDER BY UploadedAt DESC
            ''', (session['user_id'],))
            columns = [column[0] for column in cursor.description]
            uploads = [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Failed to retrieve uploads: {e}")
        uploads = []
        flash('Failed to load uploaded records.', 'danger')

    return render_template('view_uploads.html', uploads=uploads)

@app.route('/view_activities')
@login_required
def view_activities():
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT ActivityID, ActivityType, ActivityDate, Description
                FROM ActivityLogs
                WHERE UserID = ?
                ORDER BY ActivityDate DESC
            ''', (session['user_id'],))
            columns = [column[0] for column in cursor.description]
            activities = [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Failed to retrieve activities: {e}")
        activities = []
        flash('Failed to load activity logs.', 'danger')

    return render_template('view_activities.html', activities=activities)

@app.route('/admin')
@admin_required
def admin_panel():
    try:
        with db_cursor() as cursor:
            # User statistics
            cursor.execute('SELECT COUNT(*) as user_count FROM Users')
            user_count = cursor.fetchone()[0]
            
            # Activity statistics
            cursor.execute('SELECT COUNT(*) as activity_count FROM ActivityLogs')
            activity_count = cursor.fetchone()[0]
            
            # Recent activities
            cursor.execute('''
                SELECT TOP 10 a.ActivityID, u.Name, a.ActivityType, a.ActivityDate, a.Description
                FROM ActivityLogs a
                JOIN Users u ON a.UserID = u.UserID
                ORDER BY a.ActivityDate DESC
            ''')
            recent_activities = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                recent_activities.append(dict(zip(columns, row)))
            
            # Recent users
            cursor.execute('''
                SELECT TOP 5 UserID, Name, Email, CreatedAt
                FROM Users
                ORDER BY CreatedAt DESC
            ''')
            recent_users = []
            columns = [column[0] for column in cursor.description]
            for row in cursor.fetchall():
                recent_users.append(dict(zip(columns, row)))
            
            # System statistics
            cursor.execute('SELECT COUNT(*) as record_count FROM MedicalRecords')
            record_count = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) as reminder_count FROM Reminders')
            reminder_count = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) as goal_count FROM Goals')
            goal_count = cursor.fetchone()[0]
            
    except Exception as e:
        logger.error(f"Error loading admin panel: {e}")
        flash('Error loading admin panel', 'danger')
        return redirect(url_for('dashboard'))
    
    return render_template('admin_panel.html',
                         user_count=user_count,
                         activity_count=activity_count,
                         recent_activities=recent_activities,
                         recent_users=recent_users,
                         record_count=record_count,
                         reminder_count=reminder_count,
                         goal_count=goal_count)

@app.route('/admin/users')
@admin_required
def admin_users():
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT UserID, Name, Email, Role, CreatedAt, LastLogin
                FROM Users
                ORDER BY CreatedAt DESC
            ''')
            columns = [column[0] for column in cursor.description]
            users = [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Error loading users: {e}")
        flash('Error loading users', 'danger')
        users = []
    
    return render_template('admin_users.html', users=users)

@app.route('/admin/activities')
@admin_required
def admin_activities():
    try:
        with db_cursor() as cursor:
            cursor.execute('''
                SELECT a.ActivityID, u.Name, a.ActivityType, a.ActivityDate, a.Description
                FROM ActivityLogs a
                JOIN Users u ON a.UserID = u.UserID
                ORDER BY a.ActivityDate DESC
            ''')
            columns = [column[0] for column in cursor.description]
            activities = [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Error loading activities: {e}")
        flash('Error loading activities', 'danger')
        activities = []
    
    return render_template('admin_activities.html', activities=activities)

# Email functions
def send_verification_email(email, name):
    try:
        with db_cursor() as cursor:
            token = generate_password_hash(f"{email}{datetime.now()}")
            expires_at = datetime.now() + timedelta(hours=24)
            
            cursor.execute('''
                INSERT INTO EmailVerificationTokens (Email, Token, ExpiresAt)
                VALUES (?, ?, ?)
            ''', (email, token, expires_at))
            
            msg = Message("Verify Your Wellness360 Account",
                          sender=app.config['MAIL_USERNAME'],
                          recipients=[email])
            msg.body = f"""Hello {name},
            
Please verify your Wellness360 account by clicking this link:
{url_for('verify_email', token=token, _external=True)}

This link will expire in 24 hours.

If you didn't create an account, please ignore this email.

The Wellness360 Team"""
            mail.send(msg)
    except Exception as e:
        logger.error(f"Error sending verification email: {e}")

def send_password_reset_email(email, name, token):
    try:
        msg = Message("Password Reset Request",
                      sender=app.config['MAIL_USERNAME'],
                      recipients=[email])
        msg.body = f"""Hello {name},
        
You requested a password reset for your Wellness360 account. 
Click this link to reset your password:
{url_for('reset_password', token=token, _external=True)}

This link will expire in 1 hour.

If you didn't request this, please ignore this email.

The Wellness360 Team"""
        mail.send(msg)
    except Exception as e:
        logger.error(f"Error sending password reset email: {e}")

def send_reminder_email(reminder):
    msg = Message("Reminder: " + reminder['ReminderType'],
                  sender=app.config['MAIL_USERNAME'],
                  recipients=[session['email']])
    msg.body = f"""Reminder: {reminder['ReminderType']}
Time: {reminder['ReminderDate']} {reminder['ReminderTime']}

Description: {reminder.get('Description', 'No description provided')}

The Wellness360 Team"""
    mail.send(msg)

if __name__ == '__main__':
    app.run(debug=True)
